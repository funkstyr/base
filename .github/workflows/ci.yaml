name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    types: [opened, synchronize]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-server

jobs:
  build:
    name: üèó Build
    timeout-minutes: 5
    runs-on: ubuntu-latest
    # To use Remote Caching, uncomment the next lines and follow the steps below.
    # env:
    #  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
    #  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - uses: oven-sh/setup-bun@v2

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: bun install

      - name: Build
        run: bun run build


  check:
    name: ü¶∫ Check
    timeout-minutes: 5
    runs-on: ubuntu-latest
    # To use Remote Caching, uncomment the next lines and follow the steps below.
    # env:
    #  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
    #  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Cache turbo build setup
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - uses: oven-sh/setup-bun@v2

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: bun install

      - name: Lint
        run: bun run lint

      - name: Type Check
        run: bun run type-check

      - name: Test
        run: bun test


  publish-docker-server:
    name: üì¶ Publish
    runs-on: ubuntu-latest
    needs: ["build", "check"]
    # TODO: dont have a release system, dont want to spam containers
    if: github.ref == 'refs/heads/main'

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            src:
              - 'apps/server/**'
              - 'apps/web/**'
              - 'packages/**'

      - name: üêã Docker Login
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        if: steps.changes.outputs.src == 'true'
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üêã Docker Metadata
        if: steps.changes.outputs.src == 'true'
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}

      - name: üêã Docker Build and push
        if: steps.changes.outputs.src == 'true'
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: ./apps/server/Dockerfile
          build-args: |
            SERVER_URL=${{vars.PROD_SERVER_URL}}
            POSTHOG_KEY=${{vars.PROD_POSTHOG_KEY}}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # cache-from: type=registry,refs=${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:main
          # cache-to: mode=max,image-manifest=true,oci-mediatypes=true,refs=${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}:main

      - name: Generate artifact attestation
        if: steps.changes.outputs.src == 'true'
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      # - name: üêã Docker Build
      #   run: docker build -f ./apps/server/Dockerfile --build-arg SERVER_URL=${{vars.PROD_SERVER_URL}} --build-arg POSTHOG_KEY=${{vars.PROD_POSTHOG_KEY}} -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} .

      # - name: üêã Docker Push
      #   run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
